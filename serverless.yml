service: gameattendants
# app and org for use with dashboard.serverless.com
app: game-attendant
org: wvandolah

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  tables:
    gameAttendants: game-attendants1
    teamPlayers: team-players
  Auth0:
    issuer: https://wvandolah.auth0.com/
    jwksUri: https://wvandolah.auth0.com/.well-known/jwks.json
    audience: gameattendants
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      inMemory: true
      migrate: true
      stage: ${opt:stage, 'dev'}

provider:
  name: aws
  runtime: nodejs10.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.tables.gameAttendants}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.tables.teamPlayers}"

functions:
  authFn:
    handler: src/service/authFn.service.authFn
    environment:
      jwksUri: ${self:custom.Auth0.jwksUri}
      audience: ${self:custom.Auth0.audience}
      issuer: ${self:custom.Auth0.issuer}
  sendStatusRequest:
    handler: src/controller/sendStatus.controller.sendStatusRequest
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: sendStatusRequest
          method: post
          cors: true
          authorizer: authFn
  searchStatusRequest:
    handler: src/controller/status.controller.searchStatus
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: status
          method: post
          cors: true
  deleteStatusRequest:
    handler: src/controller/status.controller.deleteStatus
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: status
          method: delete
          cors: true
          authorizer: authFn
  updatePlayerStatusRequest:
    handler: src/controller/status.controller.updatePlayerStatus
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: playerStatus
          method: put
          cors: true
  createTeamPlayerRequest:
    handler: src/controller/teamPlayers.controller.create
    environment:
      tableTeamPlayers: ${self:custom.tables.teamPlayers}
    events:
      - http:
          path: teamPlayers
          method: post
          cors: true
          authorizer: authFn
  searchTeamPlayerRequest:
    handler: src/controller/teamPlayers.controller.search
    environment:
      tableTeamPlayers: ${self:custom.tables.teamPlayers}
    events:
      - http:
          path: teamPlayers
          method: get
          cors: true
          authorizer: authFn
  deleteTeamPlayerRequest:
    handler: src/controller/teamPlayers.controller.delete
    environment:
      tableTeamPlayers: ${self:custom.tables.teamPlayers}
    events:
      - http:
          path: teamPlayers
          method: delete
          cors: true
          authorizer: authFn
resources:
  Resources:
    gameAttendants:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.gameAttendants}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: team
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: team
            KeyType: HASH
          - AttributeName: game
            KeyType: RANGE
    teamPlayers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.teamPlayers}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: teamId
            KeyType: RANGE

