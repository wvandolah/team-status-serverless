service: gameattendant

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: teamstatus-api.wvandolah.com
    dev: teamstatus-api-dev.wvandolah.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: 'wvandolah.com'
  serverless-offline:
    port: 4000
  tables:
    gameAttendants: "game-attendants-${self:custom.stage}"
    teamPlayers: "team-player-${self:custom.stage}"
  Auth0:
    issuer: https://wvandolah.auth0.com/
    jwksUri: https://wvandolah.auth0.com/.well-known/jwks.json
    audience: gameattendants
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      inMemory: true
      migrate: true
      stage: ${opt:stage, 'dev'}
  topic: 
    sendNotificationTopic: "gameattendanttasks-${self:custom.stage}-send-notification-topic"
provider:
  name: aws
  runtime: nodejs10.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.tables.gameAttendants}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.tables.teamPlayers}"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: { "Fn::Join" : [":", ["arn:aws:sns:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.topic.sendNotificationTopic}" ] ]  }

functions:
  authFn:
    handler: src/service/authFn.authFn
    environment:
      jwksUri: ${self:custom.Auth0.jwksUri}
      audience: ${self:custom.Auth0.audience}
      issuer: ${self:custom.Auth0.issuer}
  sendStatusRequest:
    handler: src/controller/sendStatus.sendStatusRequest
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
      sendNotificationTopicArn: { "Fn::Join" : [":", ["arn:aws:sns:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.topic.sendNotificationTopic}" ] ]  }
    events:
      - http:
          path: status
          method: post
          cors: true
          authorizer: authFn
  resendStatusRequest:
    handler: src/controller/sendStatus.resendStatusRequest
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
      sendNotificationTopicArn: { "Fn::Join" : [":", ["arn:aws:sns:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.topic.sendNotificationTopic}" ] ]  }
    events:
      - http:
          path: resend
          method: post
          cors: true
          authorizer: authFn
  searchStatusRequest:
    handler: src/controller/status.searchStatuses
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: status
          method: get
          cors: true
          authorizer: authFn
  deleteStatusRequest:
    handler: src/controller/status.deleteStatus
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
      sendNotificationTopicArn: { "Fn::Join" : [":", ["arn:aws:sns:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.topic.sendNotificationTopic}" ] ]  }
    events:
      - http:
          path: status
          method: delete
          cors: true
          authorizer: authFn
  updatePlayerStatusRequest:
    handler: src/controller/status.updatePlayerStatus
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: playerStatus
          method: put
          cors: true
  searchPlayerStatusRequest:
    handler: src/controller/status.searchStatus
    environment:
      tableGameAttendants: ${self:custom.tables.gameAttendants}
    events:
      - http:
          path: playerStatus
          method: get
          cors: true
  createTeamPlayerRequest:
    handler: src/controller/teamPlayers.create
    environment:
      tableTeamPlayers: ${self:custom.tables.teamPlayers}
    events:
      - http:
          path: teamPlayers
          method: post
          cors: true
          authorizer: authFn
  searchTeamPlayerRequest:
    handler: src/controller/teamPlayers.search
    environment:
      tableTeamPlayers: ${self:custom.tables.teamPlayers}
    events:
      - http:
          path: teamPlayers
          method: get
          cors: true
          authorizer: authFn
  deleteTeamPlayerRequest:
    handler: src/controller/teamPlayers.deleteTeamPlayer
    environment:
      tableTeamPlayers: ${self:custom.tables.teamPlayers}
    events:
      - http:
          path: teamPlayers
          method: delete
          cors: true
          authorizer: authFn
resources:
  Resources:
    gameAttendants:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.gameAttendants}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: teamId
            AttributeType: S
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: teamId
            KeyType: HASH
          - AttributeName: gameId
            KeyType: RANGE
    teamPlayers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.teamPlayers}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: teamId
            KeyType: RANGE
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
